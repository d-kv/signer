// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "d-kv/signer/db-common/entity"

	mock "github.com/stretchr/testify/mock"
)

// CommandRepo is an autogenerated mock type for the CommandRepo type
type CommandRepo struct {
	mock.Mock
}

// CreateBundleIdCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) CreateBundleIdCommand(_a0 context.Context, _a1 entity.CreateBundleId) (error, entity.CreateBundleId) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBundleIdCommand")
	}

	var r0 error
	var r1 entity.CreateBundleId
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateBundleId) (error, entity.CreateBundleId)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateBundleId) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateBundleId) entity.CreateBundleId); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.CreateBundleId)
	}

	return r0, r1
}

// CreateCertificateCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) CreateCertificateCommand(_a0 context.Context, _a1 entity.CreateCertificate) (error, entity.CreateCertificate) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateCommand")
	}

	var r0 error
	var r1 entity.CreateCertificate
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateCertificate) (error, entity.CreateCertificate)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateCertificate) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateCertificate) entity.CreateCertificate); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.CreateCertificate)
	}

	return r0, r1
}

// CreateDeviceCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) CreateDeviceCommand(_a0 context.Context, _a1 entity.CreateDevice) (error, entity.CreateDevice) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceCommand")
	}

	var r0 error
	var r1 entity.CreateDevice
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateDevice) (error, entity.CreateDevice)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateDevice) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateDevice) entity.CreateDevice); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.CreateDevice)
	}

	return r0, r1
}

// CreateEnableCapabilityTypeCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) CreateEnableCapabilityTypeCommand(_a0 context.Context, _a1 entity.EnableCapabilityType) (error, entity.EnableCapabilityType) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnableCapabilityTypeCommand")
	}

	var r0 error
	var r1 entity.EnableCapabilityType
	if rf, ok := ret.Get(0).(func(context.Context, entity.EnableCapabilityType) (error, entity.EnableCapabilityType)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.EnableCapabilityType) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.EnableCapabilityType) entity.EnableCapabilityType); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.EnableCapabilityType)
	}

	return r0, r1
}

// CreateProfileCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) CreateProfileCommand(_a0 context.Context, _a1 entity.CreateProfile) (error, entity.CreateProfile) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfileCommand")
	}

	var r0 error
	var r1 entity.CreateProfile
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateProfile) (error, entity.CreateProfile)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateProfile) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateProfile) entity.CreateProfile); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.CreateProfile)
	}

	return r0, r1
}

// FindByStatusBundleIdCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) FindByStatusBundleIdCommand(_a0 context.Context, _a1 entity.Status) []entity.CreateBundleId {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusBundleIdCommand")
	}

	var r0 []entity.CreateBundleId
	if rf, ok := ret.Get(0).(func(context.Context, entity.Status) []entity.CreateBundleId); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CreateBundleId)
		}
	}

	return r0
}

// FindByStatusCertificateCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) FindByStatusCertificateCommand(_a0 context.Context, _a1 entity.Status) []entity.CreateCertificate {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusCertificateCommand")
	}

	var r0 []entity.CreateCertificate
	if rf, ok := ret.Get(0).(func(context.Context, entity.Status) []entity.CreateCertificate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CreateCertificate)
		}
	}

	return r0
}

// FindByStatusDeviceCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) FindByStatusDeviceCommand(_a0 context.Context, _a1 entity.Status) []entity.CreateDevice {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusDeviceCommand")
	}

	var r0 []entity.CreateDevice
	if rf, ok := ret.Get(0).(func(context.Context, entity.Status) []entity.CreateDevice); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CreateDevice)
		}
	}

	return r0
}

// FindByStatusEnableCapabilityTypeCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) FindByStatusEnableCapabilityTypeCommand(_a0 context.Context, _a1 entity.Status) []entity.EnableCapabilityType {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusEnableCapabilityTypeCommand")
	}

	var r0 []entity.EnableCapabilityType
	if rf, ok := ret.Get(0).(func(context.Context, entity.Status) []entity.EnableCapabilityType); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.EnableCapabilityType)
		}
	}

	return r0
}

// FindByStatusProfileCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) FindByStatusProfileCommand(_a0 context.Context, _a1 entity.Status) []entity.CreateProfile {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindByStatusProfileCommand")
	}

	var r0 []entity.CreateProfile
	if rf, ok := ret.Get(0).(func(context.Context, entity.Status) []entity.CreateProfile); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CreateProfile)
		}
	}

	return r0
}

// GetStatusByIdBundleIdCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) GetStatusByIdBundleIdCommand(_a0 context.Context, _a1 uint) (error, entity.Status) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByIdBundleIdCommand")
	}

	var r0 error
	var r1 entity.Status
	if rf, ok := ret.Get(0).(func(context.Context, uint) (error, entity.Status)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) entity.Status); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.Status)
	}

	return r0, r1
}

// GetStatusByIdCertificateCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) GetStatusByIdCertificateCommand(_a0 context.Context, _a1 uint) (error, entity.Status) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByIdCertificateCommand")
	}

	var r0 error
	var r1 entity.Status
	if rf, ok := ret.Get(0).(func(context.Context, uint) (error, entity.Status)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) entity.Status); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.Status)
	}

	return r0, r1
}

// GetStatusByIdDeviceCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) GetStatusByIdDeviceCommand(_a0 context.Context, _a1 uint) (error, entity.Status) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByIdDeviceCommand")
	}

	var r0 error
	var r1 entity.Status
	if rf, ok := ret.Get(0).(func(context.Context, uint) (error, entity.Status)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) entity.Status); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.Status)
	}

	return r0, r1
}

// GetStatusByIdEnableCapabilityTypeCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) GetStatusByIdEnableCapabilityTypeCommand(_a0 context.Context, _a1 uint) (error, entity.Status) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByIdEnableCapabilityTypeCommand")
	}

	var r0 error
	var r1 entity.Status
	if rf, ok := ret.Get(0).(func(context.Context, uint) (error, entity.Status)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) entity.Status); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.Status)
	}

	return r0, r1
}

// GetStatusByIdProfileCommand provides a mock function with given fields: _a0, _a1
func (_m *CommandRepo) GetStatusByIdProfileCommand(_a0 context.Context, _a1 uint) (error, entity.Status) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStatusByIdProfileCommand")
	}

	var r0 error
	var r1 entity.Status
	if rf, ok := ret.Get(0).(func(context.Context, uint) (error, entity.Status)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) entity.Status); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(entity.Status)
	}

	return r0, r1
}

// SetStatusByIdBundleIdCommand provides a mock function with given fields: _a0, _a1, _a2
func (_m *CommandRepo) SetStatusByIdBundleIdCommand(_a0 context.Context, _a1 uint, _a2 entity.Status) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetStatusByIdBundleIdCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.Status) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusByIdCertificateCommand provides a mock function with given fields: _a0, _a1, _a2
func (_m *CommandRepo) SetStatusByIdCertificateCommand(_a0 context.Context, _a1 uint, _a2 entity.Status) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetStatusByIdCertificateCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.Status) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusByIdDeviceCommand provides a mock function with given fields: _a0, _a1, _a2
func (_m *CommandRepo) SetStatusByIdDeviceCommand(_a0 context.Context, _a1 uint, _a2 entity.Status) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetStatusByIdDeviceCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.Status) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusByIdEnableCapabilityTypeCommand provides a mock function with given fields: _a0, _a1, _a2
func (_m *CommandRepo) SetStatusByIdEnableCapabilityTypeCommand(_a0 context.Context, _a1 uint, _a2 entity.Status) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetStatusByIdEnableCapabilityTypeCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.Status) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusByIdProfileCommand provides a mock function with given fields: _a0, _a1, _a2
func (_m *CommandRepo) SetStatusByIdProfileCommand(_a0 context.Context, _a1 uint, _a2 entity.Status) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetStatusByIdProfileCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, entity.Status) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommandRepo creates a new instance of CommandRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandRepo {
	mock := &CommandRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
