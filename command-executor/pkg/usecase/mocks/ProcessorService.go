// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "d-kv/signer/db-common/entity"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	usecase "d-kv/signer/command-executor/pkg/usecase"
)

// ProcessorService is an autogenerated mock type for the ProcessorService type
type ProcessorService struct {
	mock.Mock
}

// Processing provides a mock function with given fields: ctx, operation
func (_m *ProcessorService) Processing(ctx context.Context, operation usecase.DataBaseCommand) (*http.Response, error) {
	ret := _m.Called(ctx, operation)

	if len(ret) == 0 {
		panic("no return value specified for Processing")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.DataBaseCommand) (*http.Response, error)); ok {
		return rf(ctx, operation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.DataBaseCommand) *http.Response); ok {
		r0 = rf(ctx, operation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.DataBaseCommand) error); ok {
		r1 = rf(ctx, operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatusById provides a mock function with given fields: ctx, baseCommand, status
func (_m *ProcessorService) SetStatusById(ctx context.Context, baseCommand *usecase.DataBaseCommand, status entity.Status) error {
	ret := _m.Called(ctx, baseCommand, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatusById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *usecase.DataBaseCommand, entity.Status) error); ok {
		r0 = rf(ctx, baseCommand, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartProcessor provides a mock function with given fields: ctx
func (_m *ProcessorService) StartProcessor(ctx context.Context) {
	_m.Called(ctx)
}

// NewProcessorService creates a new instance of ProcessorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessorService {
	mock := &ProcessorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
