// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	entity "d-kv/signer/command-executor/pkg/entity"

	mock "github.com/stretchr/testify/mock"
)

// DataBaseCommand is an autogenerated mock type for the DataBaseCommand type
type DataBaseCommand struct {
	mock.Mock
}

// Convert provides a mock function with given fields:
func (_m *DataBaseCommand) Convert() entity.ApiEntity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 entity.ApiEntity
	if rf, ok := ret.Get(0).(func() entity.ApiEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.ApiEntity)
		}
	}

	return r0
}

// GetId provides a mock function with given fields:
func (_m *DataBaseCommand) GetId() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetIntegrationId provides a mock function with given fields:
func (_m *DataBaseCommand) GetIntegrationId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewDataBaseCommand creates a new instance of DataBaseCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataBaseCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataBaseCommand {
	mock := &DataBaseCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
