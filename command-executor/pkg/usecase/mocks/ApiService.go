// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "d-kv/signer/command-executor/pkg/entity"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ApiService is an autogenerated mock type for the ApiService type
type ApiService struct {
	mock.Mock
}

// SendCreateCommand provides a mock function with given fields: ctx, e, IntegrationId
func (_m *ApiService) SendCreateCommand(ctx context.Context, e entity.ApiEntity, IntegrationId string) (*http.Response, error) {
	ret := _m.Called(ctx, e, IntegrationId)

	if len(ret) == 0 {
		panic("no return value specified for SendCreateCommand")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ApiEntity, string) (*http.Response, error)); ok {
		return rf(ctx, e, IntegrationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ApiEntity, string) *http.Response); ok {
		r0 = rf(ctx, e, IntegrationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ApiEntity, string) error); ok {
		r1 = rf(ctx, e, IntegrationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApiService creates a new instance of ApiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiService {
	mock := &ApiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
